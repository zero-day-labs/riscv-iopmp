// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package rv_iopmp_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 14;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } chk_x;
    struct packed {
      logic        q;
    } no_x;
    struct packed {
      logic        q;
    } no_w;
    struct packed {
      logic        q;
    } enable;
  } iopmp_reg2hw_hwcfg0_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } prio_entry;
    struct packed {
      logic [15:0] q;
    } sid_transl;
  } iopmp_reg2hw_hwcfg2_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } iopmp_reg2hw_entry_offset_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } l;
    struct packed {
      logic        q;
    } ie;
    struct packed {
      logic        q;
    } ire;
    struct packed {
      logic [2:0]  q;
    } rre;
    struct packed {
      logic        q;
    } iwe;
    struct packed {
      logic [2:0]  q;
    } rwe;
    struct packed {
      logic        q;
    } pee;
    struct packed {
      logic [2:0]  q;
    } rpe;
  } iopmp_reg2hw_errreact_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } l;
    struct packed {
      logic [6:0]  q;
    } f;
  } iopmp_reg2hw_mdcfglck_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } l;
    struct packed {
      logic [15:0] q;
    } f;
  } iopmp_reg2hw_entrylck_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } ip;
    struct packed {
      logic [1:0]  q;
    } ttype;
    struct packed {
      logic [2:0]  q;
    } etype;
  } iopmp_reg2hw_err_reqinfo_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } sid;
    struct packed {
      logic [15:0] q;
    } eid;
  } iopmp_reg2hw_err_reqid_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } iopmp_reg2hw_err_reqaddr_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } iopmp_reg2hw_err_reqaddrh_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } ip;
    struct packed {
      logic [1:0]  d;
      logic        de;
    } ttype;
    struct packed {
      logic [2:0]  d;
      logic        de;
    } etype;
  } iopmp_hw2reg_err_reqinfo_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] d;
      logic        de;
    } sid;
    struct packed {
      logic [15:0] d;
      logic        de;
    } eid;
  } iopmp_hw2reg_err_reqid_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } iopmp_hw2reg_err_reqaddr_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } iopmp_hw2reg_err_reqaddrh_reg_t;

  // Register -> HW type
  typedef struct packed {
    iopmp_reg2hw_hwcfg0_reg_t hwcfg0; // [357:354]
    iopmp_reg2hw_hwcfg2_reg_t hwcfg2; // [353:322]
    iopmp_reg2hw_entry_offset_reg_t entry_offset; // [321:290]
    iopmp_reg2hw_errreact_reg_t errreact; // [289:276]
    iopmp_reg2hw_mdcfglck_reg_t mdcfglck; // [275:268]
    iopmp_reg2hw_entrylck_reg_t entrylck; // [267:251]
    iopmp_reg2hw_err_reqinfo_reg_t err_reqinfo; // [250:245]
    iopmp_reg2hw_err_reqid_reg_t err_reqid; // [244:213]
    iopmp_reg2hw_err_reqaddr_reg_t err_reqaddr; // [212:181]
    iopmp_reg2hw_err_reqaddrh_reg_t err_reqaddrh; // [180:149]
  } iopmp_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    iopmp_hw2reg_err_reqinfo_reg_t err_reqinfo; // [108:100]
    iopmp_hw2reg_err_reqid_reg_t err_reqid; // [99:66]
    iopmp_hw2reg_err_reqaddr_reg_t err_reqaddr; // [65:33]
    iopmp_hw2reg_err_reqaddrh_reg_t err_reqaddrh; // [32:0]
  } iopmp_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] IOPMP_VERSION_OFFSET = 14'h 0;
  parameter logic [BlockAw-1:0] IOPMP_IMP_OFFSET = 14'h 4;
  parameter logic [BlockAw-1:0] IOPMP_HWCFG0_OFFSET = 14'h 8;
  parameter logic [BlockAw-1:0] IOPMP_HWCFG1_OFFSET = 14'h c;
  parameter logic [BlockAw-1:0] IOPMP_HWCFG2_OFFSET = 14'h 10;
  parameter logic [BlockAw-1:0] IOPMP_ENTRY_OFFSET_OFFSET = 14'h 14;
  parameter logic [BlockAw-1:0] IOPMP_ERRREACT_OFFSET = 14'h 18;
  parameter logic [BlockAw-1:0] IOPMP_MDCFGLCK_OFFSET = 14'h 48;
  parameter logic [BlockAw-1:0] IOPMP_ENTRYLCK_OFFSET = 14'h 4c;
  parameter logic [BlockAw-1:0] IOPMP_ERR_REQINFO_OFFSET = 14'h 60;
  parameter logic [BlockAw-1:0] IOPMP_ERR_REQID_OFFSET = 14'h 64;
  parameter logic [BlockAw-1:0] IOPMP_ERR_REQADDR_OFFSET = 14'h 68;
  parameter logic [BlockAw-1:0] IOPMP_ERR_REQADDRH_OFFSET = 14'h 6c;
  parameter logic [BlockAw-1:0] IOPMP_MDCFG_OFFSET = 14'h 800;
  parameter logic [BlockAw-1:0] IOPMP_SRCMD_EN_OFFSET = 14'h 1000;
  parameter logic [BlockAw-1:0] IOPMP_SRCMD_ENH_OFFSET = 14'h 1004;
  parameter logic [BlockAw-1:0] IOPMP_ENTRY_ADDR_OFFSET = 14'h 2000;
  parameter logic [BlockAw-1:0] IOPMP_ENTRY_ADDRH_OFFSET = 14'h 2004;
  parameter logic [BlockAw-1:0] IOPMP_ENTRY_CFG_OFFSET = 14'h 2008;

  // Register index
  typedef enum int {
    IOPMP_VERSION,
    IOPMP_IMP,
    IOPMP_HWCFG0,
    IOPMP_HWCFG1,
    IOPMP_HWCFG2,
    IOPMP_ENTRY_OFFSET,
    IOPMP_ERRREACT,
    IOPMP_MDCFGLCK,
    IOPMP_ENTRYLCK,
    IOPMP_ERR_REQINFO,
    IOPMP_ERR_REQID,
    IOPMP_ERR_REQADDR,
    IOPMP_ERR_REQADDRH,
    IOPMP_MDCFG,
    IOPMP_SRCMD_EN,
    IOPMP_SRCMD_ENH,
    IOPMP_ENTRY_ADDR,
    IOPMP_ENTRY_ADDRH,
    IOPMP_ENTRY_CFG
  } iopmp_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] IOPMP_PERMIT [19] = '{
    4'b 1111, // index[ 0] IOPMP_VERSION
    4'b 1111, // index[ 1] IOPMP_IMP
    4'b 1111, // index[ 2] IOPMP_HWCFG0
    4'b 1111, // index[ 3] IOPMP_HWCFG1
    4'b 1111, // index[ 4] IOPMP_HWCFG2
    4'b 1111, // index[ 5] IOPMP_ENTRY_OFFSET
    4'b 1111, // index[ 6] IOPMP_ERRREACT
    4'b 0001, // index[ 7] IOPMP_MDCFGLCK
    4'b 0111, // index[ 8] IOPMP_ENTRYLCK
    4'b 0001, // index[ 9] IOPMP_ERR_REQINFO
    4'b 1111, // index[10] IOPMP_ERR_REQID
    4'b 1111, // index[11] IOPMP_ERR_REQADDR
    4'b 1111, // index[12] IOPMP_ERR_REQADDRH
    4'b 0011, // index[13] IOPMP_MDCFG
    4'b 1111, // index[14] IOPMP_SRCMD_EN
    4'b 1111, // index[15] IOPMP_SRCMD_ENH
    4'b 1111, // index[16] IOPMP_ENTRY_ADDR
    4'b 1111, // index[17] IOPMP_ENTRY_ADDRH
    4'b 0001  // index[18] IOPMP_ENTRY_CFG
  };

endpackage

